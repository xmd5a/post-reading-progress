<?php
namespace wrp\includes;

final class ReadingProgress
{
    const PLUGIN_VERSION = '1.1.0';
    const PLUGIN_NAME = 'Post Reading Progress';
    const PLUGIN_SLUG = 'post-reading-progress';

    private $pluginOptions;

    public function __construct()
    {
        //init plugin options
        $this->pluginOptions = PluginOptions::getInstance();

        //activate hook
        register_activation_hook(__FILE__, array($this, 'activatePlugin'));

        //init plugin settings
        $pluginSettings = new PluginSettings(self::PLUGIN_SLUG);
        $pluginSettings->addSection(
            'post-reading-progress-settings',
            __('Post Reading Progress Settings', self::PLUGIN_SLUG),
            function () {
                printf('<p>%s</p>', __('Here you can customize plugin options.', self::PLUGIN_SLUG));
            },
            'reading'
        );

        foreach ($this->pluginOptions->getAllOptions() as $optionID => $option) {
            $pluginSettings->addSettingsField(
                $optionID,
                $option['title'],
                $option['type'],
                $option['page'],
                array($pluginSettings, $option['callback']),
                'post-reading-progress-settings',
                $option['options']
            );
        }

        $pluginSettings->init();

        //include assets files
        add_action('wp_enqueue_scripts', array($this, 'includeAssets'));
        add_action('admin_enqueue_scripts', array($this, 'includeAdminAssets'));

        //load plugin translations
        add_action('plugins_loaded', array($this, 'loadPluginTranslations'));

        //set marker element at end of post
        add_filter('the_content', array($this, 'setPostEndMarker'));

        //print generated by plugin options style
        add_action('wp_head', array($this, 'printPluginOptionsStyle'));

        //upgrade function - set new default options
        add_action('plugins_loaded', array($this, 'activatePlugin'));
    }

    public function activatePlugin()
    {
        foreach ($this->pluginOptions->getAllOptions() as $optionID => $option) {
            add_option($optionID, $option['defaultValue'], '', 'yes');
        }
    }

    public function includeAssets()
    {
        if ($this->pluginOptions->getOption('wordpress-reading-bar-enable-plugin') == 1) {
            if (in_array(
                get_post_type(),
                $this->pluginOptions->getOption('wordpress-reading-bar-enabled-post-types')
            )) {
                wp_enqueue_script(
                    __CLASS__,
                    plugins_url(self::PLUGIN_SLUG . '/public/js/bundle.js'),
                    null,
                    self::PLUGIN_VERSION,
                    true
                );
                wp_localize_script(
                    __CLASS__,
                    'postReadingProgress',
                    array(
                        'position' => $this->pluginOptions->getOption('wordpress-reading-bar-position'),
                        'autohide' => $this->pluginOptions->getOption('wordpress-reading-bar-autohide'),
                        'autohideAnimation' =>
                            $this->pluginOptions->getOption('wordpress-reading-bar-autohide-effect')
                    )
                );
                wp_enqueue_style(
                    __CLASS__ . 'css',
                    plugins_url(self::PLUGIN_SLUG . '/public/css/bundle.css'),
                    null,
                    self::PLUGIN_VERSION,
                    'all'
                );
            }
        }
    }

    public function includeAdminAssets(string $hook)
    {
        if ($hook == 'options-reading.php') {
            wp_enqueue_script(
                __CLASS__ . 'admin',
                plugins_url(self::PLUGIN_SLUG . '/admin/js/bundle.js'),
                array('jquery', 'iris', 'jquery-ui-slider'),
                self::PLUGIN_VERSION,
                true
            );
            wp_enqueue_style(
                __CLASS__ . 'cssadmin',
                plugins_url(self::PLUGIN_SLUG . '/admin/css/bundle.css'),
                null,
                self::PLUGIN_VERSION,
                'all'
            );
        }
    }

    public function printPluginOptionsStyle()
    {
        $widthHeightOption = array('left', 'right');
        $widthHeight = in_array(
            $this->pluginOptions->getOption('wordpress-reading-bar-position'),
            $widthHeightOption
        ) ? 'width' : 'height';

        vprintf(
            "<style type=\"text/css\">#wordpress-reading-progress-bar{background: %s;%s: %s}
#wordpress-reading-progress-bar>div{background: %s;}</style>",
            array(
                $this->pluginOptions->getOption('wordpress-reading-bar-background'),
                $widthHeight,
                $this->pluginOptions->getOption('wordpress-reading-bar-height'),
                $this->pluginOptions->getOption('wordpress-reading-bar-foreground')
            )
        );
    }

    public function loadPluginTranslations()
    {
        load_plugin_textdomain(self::PLUGIN_SLUG, false, basename(dirname(__FILE__)) . '/languages');
    }

    public function setPostEndMarker(string $content): string
    {
        //check plugin is enabled
        $enabled = $this->pluginOptions->getOption('wordpress-reading-bar-enable-plugin') == 1;

        if ($enabled === true) {
            //check current post type should have progress reading bar
            $postTypeActive = in_array(
                get_post_type(),
                $this->pluginOptions->getOption('wordpress-reading-bar-enabled-post-types')
            );

            if ((is_single() && $postTypeActive === true) or (is_page() && $postTypeActive)) {
                return $content . '<div id="wordpress-reading-progress-end"></div>';
            }
        }

        return $content;
    }
}
